#include <U8g2lib.h>
#include <Wire.h>

// Initialize display - SH1106 OLED 128x64
// If new display uses SSD1306:
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

// Possible eye states/emotions
enum EyeState {
  STATE_NEUTRAL,     // Normal, centered eyes
  STATE_ANGRY,       // Angled eyes, looking aggressive
  STATE_SURPRISED,   // Wide, round eyes
  STATE_SAD,         // Droopy, downward eyes
  STATE_SUSPICIOUS,  // Narrow, squinting eyes
  STATE_LEFT,        // Looking left
  STATE_RIGHT,       // Looking right
  STATE_UP,          // Looking up
  STATE_DOWN,        // Looking down
  STATE_SLEEPY,      // Half-closed eyes
  STATE_COUNT        // Used to count the number of states
};

// Eye parameters
const int screenWidth = 128;
const int screenHeight = 64;
const int eyeBaseWidth = 30;     // Base width of eye - increased size
const int eyeBaseHeight = 44;    // Base height of eye - increased size
const int eyeSpacing = 16;       // Space between eyes
const int blinkDuration = 220;   // Duration of blink in ms
const int transitionDuration = 150; // Duration of transition in ms

// Animation timing
unsigned long lastBlinkTime = 0;
unsigned long lastStateChangeTime = 0;
unsigned long transitionStartTime = 0;

// Eye state
EyeState currentEyeState = STATE_NEUTRAL;
EyeState targetEyeState = STATE_NEUTRAL;
bool isBlinking = false;
byte blinkState = 0;  // 0 = open, 1 = half-closed, 2 = closed, 3 = half-open
bool isTransitioning = false;
float transitionProgress = 1.0; // 0.0 to 1.0

// Eye dimension variables for smooth transitions
float leftEyeWidth, leftEyeHeight, rightEyeWidth, rightEyeHeight;
float leftOffsetX, leftOffsetY, rightOffsetX, rightOffsetY;
float leftTargetWidth, leftTargetHeight, rightTargetWidth, rightTargetHeight;
float leftTargetOffsetX, leftTargetOffsetY, rightTargetOffsetX, rightTargetOffsetY;
float leftAngle, rightAngle, leftTargetAngle, rightTargetAngle;

// Center coordinates
int centerX, centerY, leftEyeX, rightEyeX, eyeY;

// Behavior parameters - updated values for better randomization
const int neutralStateProbability = 70;    // 70% chance to return to neutral (increased)
const int minNeutralDuration = 4000;       // Longer minimum time in neutral (4-8 seconds)
const int maxNeutralDuration = 8000;       // Longer maximum time in neutral
const int minEmotionDuration = 1200;       // Minimum time for emotions (1.2-3 seconds)
const int maxEmotionDuration = 3000;       // Maximum time for emotions
const int emotionChangeProbability = 30;   // 30% chance for emotion vs 70% for look direction
const int blinkProbability = 70;           // 70% chance to blink at blink interval
const int minBlinkInterval = 2000;         // Min time between blinks (2-5 seconds)
const int maxBlinkInterval = 5000;         // Max time between blinks

// Array to track recently used states to avoid repetition
EyeState recentStates[3] = {STATE_NEUTRAL, STATE_NEUTRAL, STATE_NEUTRAL};
int recentStateIndex = 0;

// Forward declarations
void updateEyeDimensions(EyeState state, float &leftW, float &leftH, float &rightW, float &rightH, 
                         float &leftX, float &leftY, float &rightX, float &rightY, 
                         float &leftA, float &rightA);
void drawFilledEllipse(int x0, int y0, int width, int height, float angle);
bool wasStateRecentlyUsed(EyeState state);
void recordStateUse(EyeState state);

void setup() {
  // Initialize display
  u8g2.begin();
  
  // Seed random number generator with a truly random analog value
  randomSeed(analogRead(0));
  
  // Calculate initial positions
  centerX = screenWidth / 2;
  centerY = screenHeight / 2;
  leftEyeX = centerX - eyeSpacing / 2 - eyeBaseWidth / 2;
  rightEyeX = centerX + eyeSpacing / 2 + eyeBaseWidth / 2;
  eyeY = centerY;
  
  // Initialize eye dimensions with neutral state
  leftEyeWidth = eyeBaseWidth;
  leftEyeHeight = eyeBaseHeight;
  rightEyeWidth = eyeBaseWidth;
  rightEyeHeight = eyeBaseHeight;
  leftOffsetX = 0;
  leftOffsetY = 0;
  rightOffsetX = 0;
  rightOffsetY = 0;
  leftAngle = 0;
  rightAngle = 0;
  
  // Initial state
  setEyeState(STATE_NEUTRAL);
  
  // Initialize last blink time to trigger a blink soon after startup
  lastBlinkTime = millis() - random(1000, 2000);
}

void loop() {
  unsigned long currentTime = millis();
  
  // Blinking logic - random intervals with probability
  if (!isBlinking && currentTime - lastBlinkTime > random(minBlinkInterval, maxBlinkInterval)) {
    if (random(100) < blinkProbability) { // 70% chance to blink
      isBlinking = true;
      blinkState = 1;
      lastBlinkTime = currentTime;
    } else {
      // Reset the timer even if we don't blink this time
      lastBlinkTime = currentTime;
    }
  }
  
  // Process blink animation
  if (isBlinking) {
    if (currentTime - lastBlinkTime > blinkDuration / 4) {
      blinkState++;
      if (blinkState > 3) {
        isBlinking = false;
        blinkState = 0;
      }
      lastBlinkTime = currentTime;
    }
  }
  
  // Handle transitions between states
  if (isTransitioning) {
    float progress = (float)(currentTime - transitionStartTime) / transitionDuration;
    if (progress >= 1.0) {
      // Transition complete
      progress = 1.0;
      isTransitioning = false;
      currentEyeState = targetEyeState;
    }
    
    // Interpolate between states
    transitionProgress = progress;
    leftEyeWidth = leftEyeWidth + (leftTargetWidth - leftEyeWidth) * progress;
    leftEyeHeight = leftEyeHeight + (leftTargetHeight - leftEyeHeight) * progress;
    rightEyeWidth = rightEyeWidth + (rightTargetWidth - rightEyeWidth) * progress;
    rightEyeHeight = rightEyeHeight + (rightTargetHeight - rightEyeHeight) * progress;
    leftOffsetX = leftOffsetX + (leftTargetOffsetX - leftOffsetX) * progress;
    leftOffsetY = leftOffsetY + (leftTargetOffsetY - leftOffsetY) * progress;
    rightOffsetX = rightOffsetX + (rightTargetOffsetX - rightOffsetX) * progress;
    rightOffsetY = rightOffsetY + (rightTargetOffsetY - rightOffsetY) * progress;
    leftAngle = leftAngle + (leftTargetAngle - leftAngle) * progress;
    rightAngle = rightAngle + (rightTargetAngle - rightAngle) * progress;
  }
  
  // State change logic with improved randomization
  if (!isTransitioning && currentTime - lastStateChangeTime > 
      (currentEyeState == STATE_NEUTRAL ? 
       random(minNeutralDuration, maxNeutralDuration) : 
       random(minEmotionDuration, maxEmotionDuration))) {
    
    // Decide next state - increased favor for neutral state
    if (currentEyeState != STATE_NEUTRAL && random(100) < neutralStateProbability) {
      // Go back to neutral
      setEyeState(STATE_NEUTRAL);
    } else {
      // Choose a new random state that's not recently used
      EyeState newState;
      bool validState = false;
      
      while (!validState) {
        if (random(100) < emotionChangeProbability) {
          // Pick an emotion state (0-4)
          newState = (EyeState)random(5);
        } else {
          // Pick a directional state (5-9)
          newState = (EyeState)(random(5) + 5);
        }
        
        // Don't use the current state or recently used states
        if (newState != currentEyeState && !wasStateRecentlyUsed(newState)) {
          validState = true;
        }
      }
      
      setEyeState(newState);
      recordStateUse(newState);
    }
    
    lastStateChangeTime = currentTime;
  }
  
  // Draw the eyes based on current state
  drawEyes();
  
  // Small delay to control frame rate
  delay(16);  // ~60fps
}

// Check if a state was recently used
bool wasStateRecentlyUsed(EyeState state) {
  for (int i = 0; i < 3; i++) {
    if (recentStates[i] == state) {
      return true;
    }
  }
  return false;
}

// Record state usage to avoid repetition
void recordStateUse(EyeState state) {
  recentStates[recentStateIndex] = state;
  recentStateIndex = (recentStateIndex + 1) % 3;
}

void setEyeState(EyeState newState) {
  // Skip if already transitioning or same state
  if (isTransitioning || newState == currentEyeState) {
    return;
  }
  
  // Set up transition
  targetEyeState = newState;
  isTransitioning = true;
  transitionStartTime = millis();
  transitionProgress = 0.0;
  
  // Calculate target dimensions
  updateEyeDimensions(
    newState, 
    leftTargetWidth, leftTargetHeight, 
    rightTargetWidth, rightTargetHeight,
    leftTargetOffsetX, leftTargetOffsetY, 
    rightTargetOffsetX, rightTargetOffsetY,
    leftTargetAngle, rightTargetAngle
  );
}

void updateEyeDimensions(EyeState state, float &leftW, float &leftH, float &rightW, float &rightH, 
                         float &leftX, float &leftY, float &rightX, float &rightY,
                         float &leftA, float &rightA) {
  // Set default dimensions
  leftW = eyeBaseWidth;
  leftH = eyeBaseHeight;
  rightW = eyeBaseWidth;
  rightH = eyeBaseHeight;
  leftX = 0;
  leftY = 0;
  rightX = 0;
  rightY = 0;
  leftA = 0;
  rightA = 0;
  
  // Apply state-specific transformations - more dramatic emotional changes
  switch (state) {
    case STATE_ANGRY:
      // Angry eyes - angled inward and narrowed
      leftW = eyeBaseWidth * 0.7;
      leftH = eyeBaseHeight * 0.7;
      rightW = eyeBaseWidth * 0.7;
      rightH = eyeBaseHeight * 0.7;
      leftX = -5;
      rightX = 5;
      leftY = -2;
      rightY = -2;
      leftA = -0.5;  // Angle in radians (~30 degrees inward)
      rightA = 0.5;
      break;
      
    case STATE_SURPRISED:
      // Surprised - wide, round eyes
      leftW = eyeBaseWidth * 1.4;
      leftH = eyeBaseWidth * 1.4;  // Round shape
      rightW = eyeBaseWidth * 1.4;
      rightH = eyeBaseWidth * 1.4;
      leftY = -5;
      rightY = -5;
      break;
      
    case STATE_SAD:
      // Sad - droopy eyes
      leftW = eyeBaseWidth * 0.9;
      leftH = eyeBaseHeight * 0.7;
      rightW = eyeBaseWidth * 0.9;
      rightH = eyeBaseHeight * 0.7;
      leftY = 8;
      rightY = 8;
      leftA = 0.3;  // Outer corners drooping
      rightA = -0.3;
      break;
      
    case STATE_SUSPICIOUS:
      // Suspicious - one eyebrow raised
      leftW = eyeBaseWidth * 0.75;
      leftH = eyeBaseHeight * 0.6;
      rightW = eyeBaseWidth * 0.9;
      rightH = eyeBaseHeight * 0.9;
      leftY = -5;
      rightY = 3;
      leftA = 0.2;
      break;
      
    case STATE_LEFT:
      // Looking left - improved positioning
      // Left eye (smaller)
      leftW = eyeBaseWidth * 0.5;    // Slightly larger than before (was 0.4)
      leftH = eyeBaseHeight * 0.7;   // Slightly larger than before (was 0.6)
      leftX = -10;                   // Keep same position for smaller eye
      
      // Right eye (bigger)
      rightW = eyeBaseWidth * 0.8;   // Reduced width (was 1.2)
      rightH = eyeBaseHeight * 1.1;  // Slightly increased height
      rightX = -12;                   // Move closer to the smaller eye (was -4)
      break;

    case STATE_RIGHT:
      // Looking right - improved positioning
      // Left eye (bigger)
      leftW = eyeBaseWidth * 0.8;    // Reduced width (was 1.2)
      leftH = eyeBaseHeight * 1.1;   // Slightly increased height
      leftX = 12;                     // Move closer to the smaller eye (was 4)
      
      // Right eye (smaller)
      rightW = eyeBaseWidth * 0.5;   // Slightly larger than before (was 0.4)
      rightH = eyeBaseHeight * 0.7;  // Slightly larger than before (was 0.6)
      rightX = 10;                   // Keep same position for smaller eye
      break;
      
    case STATE_UP:
      // Looking up - more dramatic
      leftW = eyeBaseWidth * 0.9;
      leftH = eyeBaseHeight * 0.65;
      rightW = eyeBaseWidth * 0.9;
      rightH = eyeBaseHeight * 0.65;
      leftY = -12;
      rightY = -12;
      break;
      
    case STATE_DOWN:
      // Looking down - more dramatic
      leftW = eyeBaseWidth * 0.9;
      leftH = eyeBaseHeight * 0.65;
      rightW = eyeBaseWidth * 0.9;
      rightH = eyeBaseHeight * 0.65;
      leftY = 12;
      rightY = 12;
      break;
      
    case STATE_SLEEPY:
      // Sleepy - half-closed eyes
      leftW = eyeBaseWidth * 1.0;
      leftH = eyeBaseHeight * 0.45;
      rightW = eyeBaseWidth * 1.0;
      rightH = eyeBaseHeight * 0.45;
      leftY = 8;
      rightY = 8;
      break;
      
    case STATE_NEUTRAL:
    default:
      // Normal state - no changes
      break;
  }
}

void drawEyes() {
  u8g2.clearBuffer();
  
  // Calculate current eye openness based on blinking
  float opennessFactor = 1.0;
  if (isBlinking) {
    if (blinkState == 1) {      // Half-closing
      opennessFactor = 0.5;
    } else if (blinkState == 2) { // Fully closed
      opennessFactor = 0.1;
    } else {                    // Half-opening
      opennessFactor = 0.5;
    }
  }
  
  // Calculate actual eye dimensions including blink effect
  float leftCurrentHeight = leftEyeHeight * opennessFactor;
  float rightCurrentHeight = rightEyeHeight * opennessFactor;
  
  // Draw filled eyes
  u8g2.setDrawColor(1); // White fill
  
  // Draw left eye using our custom fill function
  drawFilledEllipse(
    leftEyeX + leftOffsetX,
    eyeY + leftOffsetY,
    leftEyeWidth,
    leftCurrentHeight,
    leftAngle
  );
  
  // Draw right eye using our custom fill function
  drawFilledEllipse(
    rightEyeX + rightOffsetX,
    eyeY + rightOffsetY,
    rightEyeWidth,
    rightCurrentHeight,
    rightAngle
  );
  
  u8g2.sendBuffer();
}

// Function to draw a properly filled ellipse with rotation
void drawFilledEllipse(int x0, int y0, int width, int height, float angle) {
  // Direct-draw algorithm for filled ellipse
  int a = width / 2;
  int b = height / 2;
  
  // Drawing with scanlines for perfect fill
  for (int y = -b; y <= b; y++) {
    // Calculate half-width of this scanline
    // Use the formula: x = a * sqrt(1 - (y/b)²)
    // But guard against division by zero or very small b
    float relY = (b > 1) ? (float)y / b : 0;
    int halfWidth = a * sqrt(1.0 - relY * relY);
    
    if (halfWidth > 0) { // Only draw if width is positive
      if (angle == 0) {
        // No rotation - simple horizontal line
        u8g2.drawHLine(x0 - halfWidth, y0 + y, halfWidth * 2);
      } else {
        // Rotated line
        float sinA = sin(angle);
        float cosA = cos(angle);
        
        // Calculate rotated endpoints
        int x1 = x0 + (-halfWidth * cosA - y * sinA);
        int y1 = y0 + (-halfWidth * sinA + y * cosA);
        int x2 = x0 + (halfWidth * cosA - y * sinA);
        int y2 = y0 + (halfWidth * sinA + y * cosA);
        
        // Draw the rotated line
        u8g2.drawLine(x1, y1, x2, y2);
      }
    }
  }
}
